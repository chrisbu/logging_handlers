// Auto-generated from logviewer.html.
// DO NOT EDIT.

library logviewer;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';
import 'package:logging_handlers/logging_handlers_shared.dart';



class LogViewer extends WebComponent   with Observable {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''
        Logging:
        
          <template></template>
        
      ''');
  autogenerated.Element __e2;
  autogenerated.Template __t;

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    _root.nodes.add(__shadowTemplate.clone(true));
    __e2 = _root.nodes[1];
    __t.loop(__e2, () => messages, ($list, $index, __t) {
      var message = $list[$index];
      var __binding1 = __t.contentBind(() => message, false);
    __t.addAll([new autogenerated.Text('\n  '),
        __binding1,
        new autogenerated.Text('\n          ')]);
    });
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e2 = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

 
  List<String> __$messages = new List<String>();
  List<String> get messages {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'messages');
    }
    return __$messages;
  }
  set messages(List<String> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'messages',
          __$messages, value);
    }
    __$messages = value;
  }
  
  LogRecordTransformer transformer;
  
  LogViewer() {
    transformer = new StringTransformer();
  }  
  
  void call(LogRecord logRecord) {
    messages.add(transformer.transform(logRecord));
  }
}
//@ sourceMappingURL=logviewer.dart.map